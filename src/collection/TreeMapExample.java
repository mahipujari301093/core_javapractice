package collection;

import java.util.TreeMap;

public class TreeMapExample {
	public static void main(String[] args) {

		// Create TreeMap
		TreeMap<Integer, String> cityMap = new TreeMap<Integer, String>();

		// 1Ô∏è‚É£ Add key-value pairs
		cityMap.put(3, "Mumbai");
		cityMap.put(1, "Delhi");
		cityMap.put(5, "Bangalore");
		cityMap.put(2, "Pune");
		System.out.println("After adding entries: " + cityMap);

		// 2Ô∏è‚É£ Duplicate key (3) ‚Üí replaces old value
		cityMap.put(3, "Chennai");
		System.out.println("After adding duplicate key (3): " + cityMap);

		// 3Ô∏è‚É£ Duplicate values ‚Üí allowed
		cityMap.put(6, "Delhi");
		System.out.println("After adding duplicate value: " + cityMap);

		// 4Ô∏è‚É£ Null key ‚Üí NOT allowed (will throw NullPointerException)
		// cityMap.put(null, "Lucknow"); // ‚ùå Uncommenting this will crash program

		// 5Ô∏è‚É£ Null value ‚Üí allowed
		cityMap.put(7, null);
		System.out.println("After adding null value: " + cityMap);

		// 6Ô∏è‚É£ Access value by key
		System.out.println("City with key 5: " + cityMap.get(5));

		// 7Ô∏è‚É£ Remove a key-value pair
		cityMap.remove(2);
		System.out.println("After removing key 2: " + cityMap);

		// 8Ô∏è‚É£ Check if key/value exists
		System.out.println("Contains key 1? " + cityMap.containsKey(1));
		System.out.println("Contains value 'Delhi'? " + cityMap.containsValue("Delhi"));

		// 9Ô∏è‚É£ Print total size
		System.out.println("Total entries in TreeMap: " + cityMap.size());
	}
}

/*
 
  üß† TreeMap Rules Summary
  
  1Ô∏è‚É£ Duplicate Keys ‚ùå Not Allowed ‚Üí Replaces old value if key exists. 2Ô∏è‚É£
  Duplicate Values ‚úÖ Allowed 3Ô∏è‚É£ Null Key ‚ùå Not allowed 4Ô∏è‚É£ Null Values ‚úÖ
  Allowed 5Ô∏è‚É£ Maintains **sorted order of keys** by default.
  
  üí° TreeMap Key Points

Stores key-value pairs like HashMap.

Keys must be unique ‚Äî duplicate keys are not allowed.

Values can be duplicate.

Null key is not allowed (but null values are allowed).

Maintains sorted order of keys (ascending by default).
 
‚úÖ Key Points

Keys are always sorted ‚Üí 1, 3, 5, 6, 7.

Duplicate keys replace old value.

Duplicate values allowed.

Null key not allowed.

Null values allowed. 
 
 */
